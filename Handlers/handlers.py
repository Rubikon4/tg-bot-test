from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from Keyboards import replyKeyboards as rk
from Keyboards import inlineKeyboards as ik

from States.states import Registration, ChangeProfile

from Database.crud import create_user_in_users, update_user_in_users

from Utils.registation import get_profile



router = Router()
    
            ###   –ö–æ–º–∞–Ω–¥–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã   ###
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('Hello! bot is running... Type /help for commands list.', reply_markup=rk.rButtons)

@router.message(Command('dice'))
async def roll_dice(message: Message):
    await message.answer_dice()

@router.message(Command('getID'))
async def get_id(message: Message):
    await message.reply(f'Your ID: {message.from_user.id}\nYour name: {message.from_user.first_name}') # reply –¥–ª—è –û–¢–í–ï–¢–ê –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è —Ç–≥)

@router.message(Command('meme'))
async def get_meme(message: Message):
    await message.answer_photo(photo='AgACAgIAAxkBAAMxaN0uaIVb7R4yLWBLZORJ0U3IUVEAAtD7MRueBelKtCJgPakJ0xIBAAMCAAN5AAM2BA',
                               caption='AHAHAHAHAHAHAHH AHAHHAH AHHA haha.....', reply_markup=ik.iButtons)

@router.message(Command('reg'))
async def cmd_register(message: Message):
    await get_profile(message)

            ###   –ö–Ω–æ–ø–æ—á–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –Ω–∞ —Ä–µ–ø–ª–∞–π –∫–Ω–æ–ø–∫–∏   ###
@router.message(F.text == 'üßë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile_button(message: Message):
    await get_profile(message)
        
@router.message(F.text == 'üé≤ –ë—Ä–æ—Å–∏—Ç—å –¥–∞–π—Å')
async def roll_dice_button(message: Message):
    await message.answer_dice()

@router.message(F.text == '–ù–∞–π—Ç–∏ —Ñ–æ—Ç–æ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)')
async def say_hello(message: Message):
    await message.answer('–°–∫–∞–∑–∞–ª –∂–µ, —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –ü–æ—Ç–æ–º –ø–æ—è–≤–∏—Ç—Å—è...')
        
            ###   –°–º–µ—à–∞–Ω–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (CMD+–†–µ–ø–ª–∞–π–ö–Ω–æ–ø–∫–∏)   ###     
@router.message(Command('help'))
@router.message(F.text == 'üîç –ü–æ–º–æ—â—å')
async def get_help(message: Message):
    await message.answer(
    '/help to get to get commands list\n'
    '/meme to get funny meme lol\n'
    '/dice to throw dice\n'
    '/getID to get your personal ID\n'
    '/reg to register yourself'
)
            ###   –ü—Ä–æ—á–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã   ###
@router.message(F.photo)                            
async def get_photo(message: Message):
    await message.answer(f'Your Photo_ID: {message.photo[-1].file_id}')

@router.message(F.text == 'Hello')
async def say_hello(message: Message):
    await message.answer('Hello mate!')

            ###   –ö–æ–ª–ª–±—ç–∫–∏   ###
"""–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
@router.callback_query(F.data == 'start_registration')
async def reg_start_step(callback: CallbackQuery, state: FSMContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–µ 'il_RegistrationProfileBtn_insideReply'."""
    await callback.answer()
    await state.set_state(Registration.username)
    await callback.message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):')
@router.message(Registration.username)
async def reg_username_step(message: Message, state: FSMContext):
    user_input = message.text
    if len(user_input) > 30:
        await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:')
    elif len(user_input) == 0:
        await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:')
    else:
        await state.update_data(username=message.text)
        await state.set_state(Registration.lucky_number)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, {message.text}!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—ë —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ:')
@router.message(Registration.lucky_number)
async def reg_luckyNumber_step(message: Message, state: FSMContext):
    try:
        user_input = int(message.text)
        if user_input > 0:
            await state.update_data(lucky_number=user_input)
            reg_data = await state.get_data()
            await create_user_in_users(
                tg_id=message.from_user.id,
                username=reg_data['username'],
                lucky_number=reg_data['lucky_number']
            )
            await message.answer(f'{message.text}? –ö—Ä–∞—Å–∏–≤–æ–µ —á–∏—Å–ª–æ!\n\n'
                                 '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n'
                                 '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ö–Ω–æ–ø–∫—É "üßë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"',
                                 reply_markup=rk.rButtons
            )
            await state.clear()
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¶–ï–õ–û–ï –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4, 16, 111 –∏ —Ç.–¥.):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¶–ï–õ–û–ï –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4, 16, 111 –∏ —Ç.–¥.):")

"""–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
@router.callback_query(F.data == 'start_change_profile')
async def changeProfile_start_step(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–µ 'il_ChangeProfileBtn_insideReply'."""
    await callback.answer()
    await state.set_state(ChangeProfile.new_username)
    await callback.message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º (–¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤):')
@router.message(ChangeProfile.new_username)
async def changeProfile_newUsername_step(message: Message, state: FSMContext):
    user_input = message.text
    if len(user_input) > 30:
        await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:')
    elif len(user_input) == 0:
        await message.answer('‚ùå –ù–∏–∫–Ω–µ–π–º –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:')
    else:
        await state.update_data(new_username=message.text)
        await state.set_state(ChangeProfile.new_lucky_number)
        await message.answer(f'–û—Ç–ª–∏—á–Ω–æ, {message.text}!\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ—ë –Ω–æ–≤–æ–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ:')
@router.message(ChangeProfile.new_lucky_number)
async def changeProfile_newLuckyNumber_step(message: Message, state: FSMContext):
    try:
        user_input = int(message.text)
        if user_input > 0:
            await state.update_data(new_lucky_number=user_input)
            profile_data = await state.get_data()
            updated_user = await update_user_in_users(
                tg_id=message.from_user.id,
                new_username=profile_data['new_username'],
                new_lucky_number=profile_data['new_lucky_number']
            )
            if updated_user:
                await message.answer(
                    f'{message.text}? –ö—Ä–∞—Å–∏–≤–æ–µ —á–∏—Å–ª–æ, –µ—â—ë –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ!\n\n'
                    '‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.\n'
                    '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –ö–Ω–æ–ø–∫—É "üßë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"',
                    reply_markup=rk.rButtons
                )
            else:
                await message.answer(
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n'
                    '–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.',
                    reply_markup=rk.rButtons
                )
            await state.clear()
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¶–ï–õ–û–ï –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4, 16, 111 –∏ —Ç.–¥.):")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¶–ï–õ–û–ï –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–û–ï —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 4, 16, 111 –∏ —Ç.–¥.):")





# @router.callback_query(F.data == 'start_change_profile')
# async def changeProfile(callback: CallbackQuery):
#     await callback.answer('–í—ã –Ω–∞–∂–∞–ª–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"')  # callback.answer() —É–±–∏—Ä–∞–µ—Ç "–º–∏–≥–∞–Ω–∏–µ" –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
#     await callback.message.answer('–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.')

            ###   –°–æ—Å—Ç–æ—è–Ω–∏—è   ###
# @router.message(Command('reg'))
# async def reg_user_firstStep(message: Message, state: FSMContext):
#     await state.set_state(Registration.name)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è:')
# 
# @router.message(Registration.name)
# async def reg_user_secondStep(message: Message, state: FSMContext):
#     await state.update_data(name = message.text)
#     await state.set_state(Registration.lucky_number)
#     await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —Å—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ:')
#     
# @router.message(Registration.lucky_number)
# async def reg_user_thirdStep(message: Message, state: FSMContext):
#     await state.update_data(lucky_number = message.text)
#     reg_data = await state.get_data()
#     await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: {reg_data['name']}\n–°—á–∞—Å—Ç–ª–∏–≤–æ–µ —á–∏—Å–ª–æ: {reg_data['lucky_number']}')
#     await state.clear()