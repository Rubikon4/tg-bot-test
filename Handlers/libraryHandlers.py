"""–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞."""

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from Keyboards import libraryKeyboards as lk

from Utils.library import read_file

from Database.crud import get_user_by_tg_id



router = Router()

@router.message(Command('library'))
async def cmd_library(message: Message):
    """–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /library. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —Ñ–∞–π–ª–æ–≤"""
    if get_user_by_tg_id(message.from_user.id) is None:
        await message.answer('C–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "üßë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –∏ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.')
    else:
        keyboard = lk.inlineLibrarySections
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ–∫—Ü–∏—é:', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('library_section_'))
async def select_library_section(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–µ–∫—Ü–∏–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    section = callback.data.split('_')[-1]
    keyboard = lk.library_sections.get(section)
    if keyboard:
        await callback.message.edit_text('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–µ–º—É:', reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith('lib_'))
async def select_library_topic(callback: CallbackQuery):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º –≤ —Å–µ–∫—Ü–∏—è—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫–∏"""
    if callback.data == 'lib_main':
            keyboard = lk.inlineLibrarySections
            await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É! –í—ã–±–µ—Ä–µ—Ç–µ —Å–µ–∫—Ü–∏—é:', reply_markup=keyboard)
            return
    try:       
        topic = callback.data.split('_')[-1]
        file_path = f'./Library/{topic}.md'
        content = await read_file(file_path)
        await callback.message.edit_text(content) # parse_mode='MarkdownV2'
    except FileNotFoundError:
        print(f"[ERROR] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        await callback.message.answer('–î–æ–∫—É–º–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...')
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
        await callback.message.answer('–î–æ–∫—É–º–µ–Ω—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...')


